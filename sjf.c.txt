#include<stdio.h>
#include<stdlib.h>

struct processes{
    int pid ;
    int at , bt , wt, tat,ct;
    int start_time; 
}p[100];

int main()
{
    int n;
    printf("enter number of process \n");
    scanf("%d",&n);
    printf("enter arrival and burst time of process \n");
    for (int i = 0; i < n; i++)
    {
        p[i].pid =i;
        scanf("%d",&p[i].at);
        scanf("%d",&p[i].bt);
    }


    int iscompleted[100] = {0};
    int current_time = 0 ;
    int completed = 0;
    int total_tat =0, total_wt =0 ;

    while(completed!=n)
    {
        int min_index= -1 , minimum =1000000;
        for (int i = 0; i < n; i++)
        {
        // finding process with min burst time in ready queue at current time 
            if(p[i].at <= current_time && iscompleted[i]==0)
            {
                if(p[i].bt < minimum)
                {
                    minimum= p[i].bt;
                    min_index=i;
                }

                // when process with having equal burst times
                if(p[i].bt == minimum)
                {
                    if(p[i].at < p[min_index].at)
                    {
                        minimum = p[i].bt;
                        min_index =i; 
                    }
                }
            }
        }

        // WHEN process with min_bt id found
        if(min_index!=-1)
        {
            iscompleted[min_index] = 1; // means we have visited that process
            
            p[min_index].ct = current_time+p[min_index].bt;
            p[min_index].tat = p[min_index].ct - p[min_index].at;
            p[min_index].wt = p[min_index].tat - p[min_index].bt;    
            total_tat += p[min_index].tat;
            total_wt += p[min_index].wt;
            current_time = p[min_index].ct;
            completed++;
        }


        else{
            // 
            current_time++;
        }

    }
    printf("pid \t at \t bt \t ct \t tat \t wt \n");
    for(int i = 0 ; i< n ; i++)
    {
        printf("%d \t %d \t %d \t %d \t %d \t %d \n" , p[i].pid,p[i].at,p[i].bt,p[i].ct,p[i].tat,p[i].wt);
    }

    printf("avg tat = %f", (total_tat/(float)n) );
    printf("avg wt = %f", (total_wt/(float)n) );

    return 0;
}